{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 3805,
     "status": "ok",
     "timestamp": 1633055005743,
     "user": {
      "displayName": "Fernando Hitoshi Masumoto",
      "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s64",
      "userId": "09071309258970890311"
     },
     "user_tz": 180
    },
    "id": "_FWINz7mOzCS",
    "outputId": "1aff73fd-89ac-4b8d-95f7-06fdd128cb61"
   },
   "outputs": [],
   "source": [
    "# Elabore um programa em python que resolva um código de acesso.\n",
    "# Toda vez que é pedido acesso, o sistema de segurança envia um código em formato de jogo da velha.\n",
    "# Então, seu programa deve descobrir se o jogador 'x' ganhou ou perdeu para conseguir acessar (obs., \"x perdeu\" inclui os casos de empate).\n",
    "\n",
    "# Exemplo de jogada (estado do jogo da velha) e o código correspondente:\n",
    "\n",
    "# x o o\n",
    "\n",
    "# x o x\n",
    "\n",
    "# x - o\n",
    "\n",
    "# Código correspondente:\n",
    "\n",
    "# |x o o|x o x|x - o|\n",
    "\n",
    "# ('|' indica o início de uma linha )\n",
    "\n",
    "# Dica: use str.find() para encontrar uma substring (\" x \") na string do código (\"|x o o| o x x |o - x \")\n",
    "\n",
    "PADRAO_GANHOU = \"1 3 5|7 9 11|13 15 17|1 7 13|3 9 15|5 11 17|1 9 17|5 9 13\"\n",
    "\n",
    "\n",
    "def localiza_x(jogada):\n",
    "    \n",
    "    padrao_jogada = []\n",
    "    \n",
    "    while \"x\" in jogada:\n",
    "    \n",
    "        n = jogada.find(\"x\")\n",
    "\n",
    "        if len(jogada) < 18:\n",
    "\n",
    "          padrao_jogada.append(n + padrao_jogada[-1] + 1)\n",
    "\n",
    "        else:\n",
    "\n",
    "          padrao_jogada.append(n)\n",
    "\n",
    "        jogada = jogada[n+1:]\n",
    "    \n",
    "    return padrao_jogada\n",
    "\n",
    "def verifica_jogada(jogada):\n",
    "\n",
    "  padrao_jogada = localiza_x(jogada)\n",
    "\n",
    "  for padrao in PADRAO_GANHOU.split(\"|\"):\n",
    "    \n",
    "    ganhou = []\n",
    "\n",
    "    for letra in padrao.split(\" \"):\n",
    "      \n",
    "      if int(letra) in padrao_jogada:\n",
    "\n",
    "        ganhou.append(True)\n",
    "      \n",
    "      else:\n",
    "\n",
    "        ganhou.append(False)\n",
    "\n",
    "    if False not in ganhou:\n",
    "\n",
    "      return ganhou\n",
    "\n",
    "  return False\n",
    "\n",
    "def main():\n",
    "\n",
    "  # Lê jogada\n",
    "  jogada = input()\n",
    "\n",
    "  # Verifica Jogada\n",
    "  xganhou = verifica_jogada(jogada)\n",
    "\n",
    "  print (\"x ganhou\" if xganhou else \"x perdeu\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "  main()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyPZrn/k94hzksT4hZRaaaAn",
   "name": "Prova 1 - Exc2",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
