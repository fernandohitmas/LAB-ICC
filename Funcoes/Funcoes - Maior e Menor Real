{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Funcoes - Maior e Menor Real","provenance":[],"authorship_tag":"ABX9TyOiDyL91kjZVkgVcjZRrTp6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":239},"id":"-vXZJDPrcmnT","executionInfo":{"status":"ok","timestamp":1632532727438,"user_tz":180,"elapsed":19316,"user":{"displayName":"Fernando Hitoshi Masumoto","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09071309258970890311"}},"outputId":"79be94bf-631e-4f3a-b62a-a61c85a081f7"},"source":["# Desenvolva um programa que receba 10 valores reais e utilize duas funções para retornar, respectivamente, o menor e o maior deles.\n","# O uso de funções é obrigatório. Em seguida, escreva o resultado com precisão de 2 casas decimais conforme exemplo.\n","\n","\n","\n","# Entrada: 10 números reais\n","\n","# Saída: Duas linhas, com o menor e o maior valor dentre os 10 valores digitados respectivamente. Utilize 2 casas decimais.\n","\n","def menor_maior(lista_numeros):\n","\n","  menor = lista_numeros[0]\n","\n","  for i,num in enumerate(lista_numeros):\n","\n","    if i == 0:\n","\n","      if num <= menor:\n","\n","        maior = menor\n","        menor = num\n","\n","      else:\n","\n","        maior = num\n","    \n","    else:\n","\n","      if num <= menor:\n","\n","        menor = num\n","\n","      if num > maior:\n","\n","        maior = num\n","\n","  return (menor, maior)\n","\n","\n","def main():\n","\n","  lista_numeros = []\n","\n","  for i in range(10):\n","\n","    lista_numeros.append(float(input()))\n","\n","  menor, maior = menor_maior(lista_numeros)\n","\n","  print(f\"{menor:.2f}\")\n","  print(f\"{maior:.2f}\")\n","\n","if __name__ == \"__main__\":\n","  main()\n"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","10\n","14\n","4\n","95.4\n","8\n","15\n","43\n","17\n","3\n","1.00\n","95.40\n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\n1\\n10\\n14\\n4\\n95.4\\n8\\n15\\n43\\n17\\n3\\n'"]},"metadata":{},"execution_count":7}]}]}